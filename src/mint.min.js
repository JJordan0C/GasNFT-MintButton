class GasNFTMintButton extends HTMLElement{constructor(){super();var t=!1}render(){this.prefixConsole="[GasNFT-MintButton-v.0.0.1]",this.requireInput=this.getAttrOrDefault("inp-mint",!1),this.requireCost=this.getAttrOrDefault("show-cost",!1),this.btn=document.createElement("button"),window.ethereum&&(this.connectWeb3(),this.contract=new this.web3.eth.Contract(this.parseJwt(this.getAttribute("abi")),this.getAttribute("address")),this.requireInput&&(this.inpMint=document.createElement("input"),this.inpMint.setAttribute("type","number"),this.inpMint.setAttribute("min","1"),this.inpMint.setAttribute("placeholder","1")),this.requireCost&&(this.costEth=document.createElement("p"),this.costEth.innerHTML=0)),this.btn.innerHTML=this.getAttrOrDefault("title","Mint"),this.appendChild(this.btn),this.appendChildIfRequired(this.requireInput,this.inpMint),this.appendChildIfRequired(this.requireCost,this.costEth),this.rendered=!0}async connectedCallback(){if(this.rendered){if(window.ethereum){let t=await window.ethereum.request({method:"eth_accounts"});window.ethereum.on("chainChanged",t=>{}),0==t.length?(this.btn.setAttribute("disabled",""),this.btn.innerHTML=this.getAttrOrDefault("no-wallet","Connect your wallet!")):(this.account=t[0],this.contract.methods.cost().call({from:this.account},(t,e)=>{this.costWei=e,this.costEth.innerHTML=this.web3.utils.fromWei(e,"ether")}),this.btn.addEventListener("click",()=>this.mint()))}}else this.render(),this.rendered=!0}disconnectedCallback(){}static get observedAttributes(){return["value","address","abi"]}attributeChangedCallback(t,e,i){this.rendered||this.render()}parseJwt(t){return JSON.parse(decodeURIComponent(atob(t.split(".")[1].replace(/-/g,"+").replace(/_/g,"/")).split("").map(function(t){return"%"+("00"+t.charCodeAt(0).toString(16)).slice(-2)}).join(""))).abi}getAttrOrDefault(t,e){return null==this.getAttribute(t)?e:this.getAttribute(t)}appendChildIfRequired(t,e){t&&this.appendChild(e)}consoleWarn(t){console.warn(`${this.prefixConsole} ${t}`)}connectWeb3(){window.hasOwnProperty("Web3")?this.web3=new Web3(Web3.givenProvider):this.consoleWarn("Web3 not detected!")}async mint(){if(void 0!=this.web3){if(0!=this.inpMint.value&&""!=this.inpMint.value){try{await this.contract.methods.mint(parseInt(this.inpMint.value)).call({from:this.account,value:1*this.costWei})}catch(t){t=t.message,this.errMint=JSON.parse(t.substring(t.indexOf("{"),t.lastIndexOf("}")+1)).originalError.message}void 0==this.errMint&&await this.contract.methods.mint(parseInt(this.inpMint.value)).send({from:this.account,value:1*this.costWei}).on("transactionHash",()=>{this.btn.setAttribute("disabled","")}).on("receipt",t=>{this.btn.removeAttribute("disabled")}).on("confirmation",(t,e)=>{this.btn.removeAttribute("disabled"),void 0==this.resMint&&(this.resMint=e)}),this.dispatchEvent(new CustomEvent("gnft-mint",{detail:{err:this.errMint,res:this.resMint}}))}}else this.connectWeb3(),this.mint()}}function defineMintButton(){customElements.define("gnft-mint-button",GasNFTMintButton)}function dynamicallyLoadScript(t){var e=document.createElement("script");return e.src=t,document.head.appendChild(e),e}window.addEventListener("load",()=>{if(window.hasOwnProperty("Web3"))defineMintButton();else{console.warn("[GasNFT-MintButton] Web3 not detected!");let t=dynamicallyLoadScript("https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js");console.warn("[GasNFT-MintButton] adding it dynamically by cdn..."),t.onload=()=>{console.warn("[GasNFT-MintButton] Web3 loaded dynamically in this page!"),console.warn("[GasNFT-MintButton] You can view the script in <head></head> tag!"),defineMintButton()}}});